selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name<- representative_split[1]
last_name<- representative_split[2]
print(first_name)
print(last_name)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == first_name)
#selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(filtered_rep_df)
return(filtered_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name<- representative_split[1]
last_name<- representative_split[2]
print(first_name)
print(last_name)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == "Alexandria")
#selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(filtered_rep_df)
return(filtered_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name<- representative_split[1]
last_name<- representative_split[2]
print(first_name)
print(last_name)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == "Alexandria")
selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name<- representative_split[1]
last_name<- representative_split[2]
print(first_name)
print(last_name)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name = first_name)
selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name<- representative_split[1]
last_name<- representative_split[2]
print(first_name)
print(last_name)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == first_name)
selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name<- representative_split[1]
last_name<- representative_split[2]
print(first_name)
print(last_name)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == "first_name")
selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
first_name_l<- representative_split[1]
last_name_l<- representative_split[2]
print(first_name_l)
print(last_name_1)
last_name_l<- representative_split[2]
print(last_name_1)
print(last_name_l)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name_l<- representative_split[1]
last_name_l<- representative_split[2]
print(first_name_l)
print(last_name_l)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == first_name_l)
selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
get_representative_info <- function(legislator) {
#GET https://api.propublica.org/congress/v1/{congress}/{chamber}/members.json
#Construct search query using congress 116
base_uri<- "https://api.propublica.org/congress/v1/116/house/members.json"
#endpoint<- paste0(specific_bill_id, ".json")
#uri<- paste0(base_uri, endpoint)
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
representative_df<- as.data.frame(text_format$results$members)
representative<- "Alexandria Ocasio-Cortez"
representative_split<- strsplit(representative, " ")
representative_split<- unlist(representative_split)
print(representative_split)
class(representative_split)
first_name_l<- representative_split[1]
last_name_l<- representative_split[2]
print(first_name_l)
print(last_name_l)
#filtered_rep_df<- filter(representative_df, first_name == first_name & last_name == last_name)
#View(filtered_rep_df)
#bill_df_specific <- bill_df_specific %>%
#select(bill_id, short_title, sponsor, sponsor_state, sponsor_party, govtrack_url, active)
#View(bill_df_specific)
filtered_rep_df<- filter(representative_df, first_name == first_name_l & last_name == last_name_l)
selected_rep_df<- select(filtered_rep_df, id, first_name, last_name, state, district, party, twitter_account, phone)
print(selected_rep_df)
return(selected_rep_df)
}
representative_info<- get_representative_info("nana")
View(representative_info)
recent_votes<- GET(https://api.propublica.org/congress/v1/house/votes/recent.json, add_headers('X-API-Key' = propublica_key))
recent_votes<- GET(https://api.propublica.org/congress/v1/house/votes/recent.json, add_headers('X-API-Key' = propublica_key))
recent_uri<- "https://api.propublica.org/congress/v1/house/votes/recent.json"
recent_votes<- GET(recent_uri, add_headers('X-API-Key' = propublica_key))
library(jsonlite)
recent_votes<- GET(recent_uri, add_headers('X-API-Key' = propublica_key))
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
percentage_other<- function(
base_uri<- paste0("https://api.propublica.org/congress/v1/members/", rep_id, "/bills/introduced.json")
response <- GET(base_uri, add_headers('X-API-Key' = propublica_key))
response_text <- content(response, "text")
text_format <- fromJSON(response_text)
#Create data frame
rep_bill_df<- as.data.frame(text_format$results$bills)
selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
return(selected_rep_bill_df)
}
#intro_bills_df<-get_representative_bills("J000298")
#View(intro_bills_df)
)
recent_votes<- GET(recent_uri, add_headers('X-API-Key' = propublica_key))
recent_votes<- as.data.frame(recent_votes)
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
#return(selected_rep_bill_df)
}
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
return(recent_votes)
}
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
return(recent_votes)
}
recent_votes<- as.data.frame(text_format_recent$results)
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
return(recent_votes)
}
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
return(recent_votes)
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
}
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
}
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
}
percentage_other<- function(rep_id) {
uri_recent<- "https://api.propublica.org/congress/v1/house/votes/recent.json")
response_recent <- GET(uri_recent, add_headers('X-API-Key' = propublica_key))
response_text_recent <- content(response, "text")
text_format_recent <- fromJSON(response_text)
#Create data frame
#recent_votes<- as.data.frame(text_format_recent$results)
#selected_rep_bill_df<- select(rep_bill_df, bill_id, title)
#print(selected_rep_bill_df)
}
library(httr)
shiny::runApp('C:/Users/roshn/Documents/INFO201/ch16-shiny/exercise-5')
runApp('C:/Users/roshn/Documents/INFO201/INFO-201-Final-Project')
runApp('C:/Users/roshn/Documents/INFO201/INFO-201-Final-Project')
install.packages("DT")
# INFO 201 Final App
library("shiny")
library("dplyr")
library("ggplot2")
library("tidyr")
library("maps")
library("DT")
page_one <- tabPanel(
"First Page"
)
page_two <- tabPanel(
"Second Page"
)
page_three <- tabPanel(
"Third Page"
)
page_four <- tabPanel(
"Fourth Page"
)
my_ui <- navbarPage(
"My app",
page_one,
page_two,
page_three,
page_four
)
my_server <- function(input,output) {
}
shinyApp(ui = my_ui, server = my_server)
setwd("C:/Users/roshn/Documents/INFO201/a6-collaboration-Johnreese212")
shiny::runApp()
library(shiny)
library(jsonlite)
library(dplyr)
library(stringr)
library(DT)
library(ggplot2)
#Read the data
trump_tweets <- read_json("data/2017_trump_twitter.json", simplifyVector = TRUE)
trump_tweets <- trump_tweets %>%
select(created_at,
text,
retweet_count,
favorite_count,
is_retweet)
#Using as.Date function
trump_approval <- read.csv("data/approval_polllist.csv", stringsAsFactors = FALSE)
trump_approval_filtered <- trump_approval %>% filter(pollster == "Gallup") %>% select(enddate, approve)
trump_approval_filtered<- select(trump_approval_filtered, enddate = enddate_2, approve)
trump_approval_filtered<- mutate(trump_approval_filtered, enddate_2 = enddate_2)
enddate_2<- trump_approval_filtered$enddate %>% as.Date(format = "%m/%d/%y")
#Using as.Date function
trump_approval <- read.csv("data/approval_polllist.csv", stringsAsFactors = FALSE)
trump_approval_filtered <- trump_approval %>% filter(pollster == "Gallup") %>% select(enddate, approve)
enddate_2<- trump_approval_filtered$enddate %>% as.Date(format = "%m/%d/%y")
trump_approval_filtered<- mutate(trump_approval_filtered, enddate_2 = enddate_2)
trump_approval_filtered<- select(trump_approval_filtered, enddate = enddate_2, approve)
trump_tweets_date <- trump_tweets %>%
mutate(Date = as.Date(trimws(paste(substr(created_at, 4, 10), "2017")), format = "%b %d %Y"), num = 1) %>% select(text, retweet_count, favorite_count, Date)
#Search function for table
search_query<- function(query, output) {
equation<- str_detect(trump_tweets_date$text, query)
trump_tweets_keyword<- mutate(trump_tweets_date, keyword_present = equation)
trump_tweets_keyword<- filter(trump_tweets_keyword, trump_tweets_keyword$keyword_present == TRUE)
trump_tweets_keyword<- select(trump_tweets_keyword, text, retweet_count, favorite_count, Date)
trump_tweets_keyword
}
plotquery<- function(query, output) {
qtable<- search_query(query)
qdate<- qtable$Date
qdate
}
plotquery("collusion")
server <- function(input, output) {
server <- function(input, output) {
output$searchquery <- renderTable({
if (input$query == input$query) {
plot.data <- search_query(input$query)
} else {
plot.data <- trump_tweets_date
}
})
output$plot_query<- renderPlot({
if (input$query == input$query) {
plot.data = trump_approval_filtered }
ggplot(plot.data, aes(x = enddate, y = approval)) + geom_line(group = 1, color = "blue") + geom_vline(xintercept = plotquery(query))
})
}
ui<- fluidPage(
titlePanel("Tracking Trump's Tweets"),
sidebarLayout(
sidebarPanel(
textInput(
inputId = "query",
label = "Trump mentioned:"
)
),
mainPanel(
tableOutput("searchquery"),
plotOutput("plot_query")
)
)
)
runApp()
shiny::runApp()
runApp()
setwd("C:/Users/roshn/Documents/INFO201/a6-collaboration-Johnreese212")
shiny::runApp()
setwd("C:/Users/roshn/Documents/INFO201/INFO-201-Final-Project")
runApp()
runApp('C:/Users/roshn/Documents/INFO201/a6-collaboration-Johnreese212')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
